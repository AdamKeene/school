Task Description:
Task-1: Count the number of primitive operations executed below and determine the best & the worst cases:
(1 points)

    Algorithm: 𝑎rrayMin(A, n)
    𝑐𝑢𝑟𝑟𝑒𝑛𝑡𝑀𝑖𝑛 ← A[0]
    𝑖 ← 1
    𝐰𝐡𝐢𝐥𝐞 𝑖 ≤ 𝑛 − 1 𝐝𝐨
        𝐢𝐟 𝑐𝑢𝑟𝑟𝑒𝑛𝑡𝑀𝑖𝑛 ≥ A[𝑖] 𝐭𝐡𝐞𝐧
            𝑐𝑢𝑟𝑟𝑒𝑛𝑡𝑀𝑖𝑛 ← A[𝑖]
        𝑖 ← 𝑖 + 1
    𝐫𝐞𝐭𝐮𝐫𝐧 𝑐𝑢𝑟𝑟𝑒𝑛𝑡𝑀𝑖𝑛

Task-2: Determine the Big-O notation for: (3 points)
    a) 2 + n(2 + 3n)
    O(n^2)

    b) n + 2 (n + 3n) n + n/2 
    O(n^2)

    c) 𝑛^3 log 𝑛 + 2n + 1 + 3𝑛^2 + n(log 𝑛)^2

Task-3: Determine the Complexity Of The Following Small Functions: (6 points)
    a) for (i = sum = 0; i < n; i++)
        sum += a[i];

    b) for (i = 0; i < n; i++)
           for (j = 0; j < n; j++)
       a[i][j] = i*j;

    c) for (i = n; i >= 1; i--)
            for (j = i; j <= n; j++) /* Note that the value of the inner loop variable (j) */
    ... /* depends on the value of the outer loop variable (i) */
    Assignment 1: Algorithm Analysis
    2

    d) for (i = 1; i <= n; i++)
           for (j = i; j <= i; j++) /* Note that the value of the inner loop variable (j) */
               ... /* depends on the value of the outer loop variable (i) */

    e) for (i = 0; i < n; i++)
           for (j = n; j > 1; j/=2)
               ...

    f) int factorial (int n)
    {
    if (n <= 1)
    return 1;
    else
    return n * factorial(n-1);
    }
